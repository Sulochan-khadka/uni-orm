"""Auto-generated by UniORM"""
from dataclasses import dataclass
from typing import List, Any
import json, urllib.request

def _request(method: str, url: str, data: dict | None = None):
    req = urllib.request.Request(url, method=method)
    req.add_header('Content-Type', 'application/json')
    if data is not None:
        req.data = json.dumps(data).encode('utf-8')
    with urllib.request.urlopen(req) as resp:
        return json.loads(resp.read().decode())

@dataclass
class User:
    id: int
    name: str

class UserClient:
    def __init__(self, base_url: str):
        self.base_url = base_url
    def find_many(self) -> List[User]:
        data = _request('GET', f"{self.base_url}/users")
        return [User(**item) for item in data]
    def find_unique(self, id: int) -> User:
        data = _request('GET', f"{self.base_url}/users/{id}")
        return User(**data)
    def create(self, data: dict) -> User:
        data = _request('POST', f"{self.base_url}/users", data)
        return User(**data)
    def update(self, id: int, data: dict) -> User:
        data = _request('PUT', f"{self.base_url}/users/{id}", data)
        return User(**data)
    def delete(self, id: int):
        return _request('DELETE', f"{self.base_url}/users/{id}")

@dataclass
class Post:
    id: int
    title: str
    content: str
    authorId: int

class PostClient:
    def __init__(self, base_url: str):
        self.base_url = base_url
    def find_many(self) -> List[Post]:
        data = _request('GET', f"{self.base_url}/posts")
        return [Post(**item) for item in data]
    def find_unique(self, id: int) -> Post:
        data = _request('GET', f"{self.base_url}/posts/{id}")
        return Post(**data)
    def create(self, data: dict) -> Post:
        data = _request('POST', f"{self.base_url}/posts", data)
        return Post(**data)
    def update(self, id: int, data: dict) -> Post:
        data = _request('PUT', f"{self.base_url}/posts/{id}", data)
        return Post(**data)
    def delete(self, id: int):
        return _request('DELETE', f"{self.base_url}/posts/{id}")

class Client:
    def __init__(self, base_url: str):
        self.user = UserClient(base_url)
        self.post = PostClient(base_url)

def create_client(base_url: str) -> Client:
    return Client(base_url)
