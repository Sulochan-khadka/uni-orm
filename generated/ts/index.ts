// Auto-generated by UniORM
export interface User {
  id: number;
  name: string;
}

export interface Post {
  id: number;
  title: string;
  content: string;
  authorId: number;
}

async function request(method: string, url: string, data?: any) {
  const opts: any = { method, headers: { 'Content-Type': 'application/json' } };
  if (data) opts.body = JSON.stringify(data);
  const res = await fetch(url, opts);
  return res.json();
}

export function createClient({ baseUrl }: { baseUrl: string }) {
  return {
    user: {
      findMany: (): Promise<User[]> => request('GET', `${baseUrl}/users`),
      findUnique: (id: number): Promise<User> => request('GET', `${baseUrl}/users/${id}`),
      create: (data: Partial<User>): Promise<User> => request('POST', `${baseUrl}/users`, data),
      update: (id: number, data: Partial<User>): Promise<User> => request('PUT', `${baseUrl}/users/${id}`, data),
      delete: (id: number): Promise<User> => request('DELETE', `${baseUrl}/users/${id}`)
    },
    post: {
      findMany: (): Promise<Post[]> => request('GET', `${baseUrl}/posts`),
      findUnique: (id: number): Promise<Post> => request('GET', `${baseUrl}/posts/${id}`),
      create: (data: Partial<Post>): Promise<Post> => request('POST', `${baseUrl}/posts`, data),
      update: (id: number, data: Partial<Post>): Promise<Post> => request('PUT', `${baseUrl}/posts/${id}`, data),
      delete: (id: number): Promise<Post> => request('DELETE', `${baseUrl}/posts/${id}`)
    },
  };
}
