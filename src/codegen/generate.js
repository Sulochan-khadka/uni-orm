const fs = require('fs');
const path = require('path');
const YAML = require('yaml');

function mapTypeToTS(t) {
  switch (t) {
    case 'int':
    case 'float':
    case 'number':
      return 'number';
    case 'string':
      return 'string';
    case 'bool':
    case 'boolean':
      return 'boolean';
    default:
      return 'any';
  }
}

function mapTypeToPy(t) {
  switch (t) {
    case 'int':
    case 'float':
    case 'number':
      return 'int';
    case 'string':
      return 'str';
    case 'bool':
    case 'boolean':
      return 'bool';
    default:
      return 'Any';
  }
}

function generateTS(models) {
  let code = `// Auto-generated by UniORM\n`;
  Object.entries(models).forEach(([name, model]) => {
    const fields = model.fields || {};
    const fieldLines = Object.entries(fields)
      .map(([f, t]) => `  ${f}: ${mapTypeToTS(t)};`)
      .join('\n');
    code += `export interface ${name} {\n${fieldLines}\n}\n\n`;
  });
  code += `async function request(method: string, url: string, data?: any) {\n` +
          `  const opts: any = { method, headers: { 'Content-Type': 'application/json' } };\n` +
          `  if (data) opts.body = JSON.stringify(data);\n` +
          `  const res = await fetch(url, opts);\n` +
          `  return res.json();\n` +
          `}\n\n`;
  code += `export function createClient({ baseUrl }: { baseUrl: string }) {\n` +
          `  return {\n`;
  Object.keys(models).forEach((name) => {
    const lc = name.charAt(0).toLowerCase() + name.slice(1);
    const route = lc + 's';
    code += `    ${lc}: {\n` +
            `      findMany: (): Promise<${name}[]> => request('GET', \`${'${'}baseUrl}/${route}\`),\n` +
            `      findUnique: (id: number): Promise<${name}> => request('GET', \`${'${'}baseUrl}/${route}/${'${'}id}\`),\n` +
            `      create: (data: Partial<${name}>): Promise<${name}> => request('POST', \`${'${'}baseUrl}/${route}\`, data),\n` +
            `      update: (id: number, data: Partial<${name}>): Promise<${name}> => request('PUT', \`${'${'}baseUrl}/${route}/${'${'}id}\`, data),\n` +
            `      delete: (id: number): Promise<${name}> => request('DELETE', \`${'${'}baseUrl}/${route}/${'${'}id}\`)\n` +
            `    },\n`;
  });
  code += `  };\n}\n`;
  return code;
}

function generatePy(models) {
  let code = `"""Auto-generated by UniORM"""\n`;
  code += `from dataclasses import dataclass\n`;
  code += `from typing import List, Any\n`;
  code += `import json, urllib.request\n\n`;
  code += `def _request(method: str, url: str, data: dict | None = None):\n` +
          `    req = urllib.request.Request(url, method=method)\n` +
          `    req.add_header('Content-Type', 'application/json')\n` +
          `    if data is not None:\n` +
          `        req.data = json.dumps(data).encode('utf-8')\n` +
          `    with urllib.request.urlopen(req) as resp:\n` +
          `        return json.loads(resp.read().decode())\n\n`;
  Object.entries(models).forEach(([name, model]) => {
    const fields = model.fields || {};
    const fieldLines = Object.entries(fields)
      .map(([f, t]) => `    ${f}: ${mapTypeToPy(t)}`)
      .join('\n');
    code += `@dataclass\nclass ${name}:\n${fieldLines || '    pass'}\n\n`;
    const lc = name.charAt(0).toLowerCase() + name.slice(1);
    const route = lc + 's';
    code += `class ${name}Client:\n` +
            `    def __init__(self, base_url: str):\n` +
            `        self.base_url = base_url\n` +
            `    def find_many(self) -> List[${name}]:\n` +
            `        data = _request('GET', f"{self.base_url}/${route}")\n` +
            `        return [${name}(**item) for item in data]\n` +
            `    def find_unique(self, id: int) -> ${name}:\n` +
            `        data = _request('GET', f"{self.base_url}/${route}/{id}")\n` +
            `        return ${name}(**data)\n` +
            `    def create(self, data: dict) -> ${name}:\n` +
            `        data = _request('POST', f"{self.base_url}/${route}", data)\n` +
            `        return ${name}(**data)\n` +
            `    def update(self, id: int, data: dict) -> ${name}:\n` +
            `        data = _request('PUT', f"{self.base_url}/${route}/{id}", data)\n` +
            `        return ${name}(**data)\n` +
            `    def delete(self, id: int):\n` +
            `        return _request('DELETE', f"{self.base_url}/${route}/{id}")\n\n`;
  });
  code += `class Client:\n` +
          `    def __init__(self, base_url: str):\n`;
  Object.keys(models).forEach((name) => {
    const lc = name.charAt(0).toLowerCase() + name.slice(1);
    code += `        self.${lc} = ${name}Client(base_url)\n`;
  });
  code += `\n` +
          `def create_client(base_url: str) -> Client:\n` +
          `    return Client(base_url)\n`;
  return code;
}

function main() {
  const schemaPath = path.join(process.cwd(), 'uniorm.schema.yaml');
  const schema = YAML.parse(fs.readFileSync(schemaPath, 'utf8'));
  const models = schema.models || {};
  const outTs = path.join(process.cwd(), 'generated', 'ts');
  fs.mkdirSync(outTs, { recursive: true });
  const tsCode = generateTS(models);
  fs.writeFileSync(path.join(outTs, 'index.ts'), tsCode);
  fs.writeFileSync(
    path.join(outTs, 'package.json'),
    JSON.stringify({ name: '@uniorm/client', version: '0.0.0', main: 'index.ts', types: 'index.ts' }, null, 2)
  );
  const outPy = path.join(process.cwd(), 'generated', 'py', 'uniorm');
  fs.mkdirSync(outPy, { recursive: true });
  const pyCode = generatePy(models);
  fs.writeFileSync(path.join(outPy, '__init__.py'), pyCode);
  // Symlinks
  try {
    const nmScope = path.join(process.cwd(), 'node_modules', '@uniorm');
    fs.mkdirSync(nmScope, { recursive: true });
    const tsLink = path.join(nmScope, 'client');
    try { fs.unlinkSync(tsLink); } catch (e) {}
    fs.symlinkSync(outTs, tsLink, 'dir');
  } catch (e) {}
  try {
    const pyLink = path.join(process.cwd(), 'uniorm');
    try { fs.unlinkSync(pyLink); } catch (e) {}
    fs.symlinkSync(outPy, pyLink, 'dir');
  } catch (e) {}
  return { ts: outTs, py: outPy };
}

if (require.main === module) {
  main();
}

module.exports = { main };
